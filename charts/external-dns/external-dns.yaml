---
# Source: external-dns/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: "dns"
  labels:
    app.kubernetes.io/name: external-dns
    helm.sh/chart: external-dns-6.11.3
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
---
# Source: external-dns/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: external-dns
  namespace: "dns"
  labels:
    app.kubernetes.io/name: external-dns
    helm.sh/chart: external-dns-6.11.3
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
  annotations:
type: Opaque
data:
  linode_api_token: "IA=="
---
# Source: external-dns/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns-dns
  namespace: "dns"
  labels:
    app.kubernetes.io/name: external-dns
    helm.sh/chart: external-dns-6.11.3
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - pods
      - nodes
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io"
      - getambassador.io
    resources:
      - ingresses
      - hosts
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - route.openshift.io
    resources:
      - routes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.istio.io
    resources:
      - gateways
      - virtualservices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - zalando.org
    resources:
      - routegroups
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - zalando.org
    resources:
      - routegroups/status
    verbs:
      - patch
      - update
  - apiGroups:
      - projectcontour.io
    resources:
      - httpproxies
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - gloo.solo.io
      - gateway.solo.io
    resources:
      - proxies
      - virtualservices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - configuration.konghq.com
    resources:
      - tcpingresses
    verbs:
      - get
      - list
      - watch
---
# Source: external-dns/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-dns
  namespace: "dns"
  labels:
    app.kubernetes.io/name: external-dns
    helm.sh/chart: external-dns-6.11.3
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: "dns"
---
# Source: external-dns/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: external-dns
  namespace: "dns"
  labels:
    app.kubernetes.io/name: external-dns
    helm.sh/chart: external-dns-6.11.3
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 7979
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: external-dns
---
# Source: external-dns/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: "dns"
  labels:
    app.kubernetes.io/name: external-dns
    helm.sh/chart: external-dns-6.11.3
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/instance: external-dns
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-dns
        helm.sh/chart: external-dns-6.11.3
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/secret: b452b288cf0b82ce84daf95bad29cb3ea11ca54fbd61b895f31443a2e8d68811
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: external-dns
                    app.kubernetes.io/instance: external-dns
                namespaces:
                  - "dns"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      serviceAccountName: external-dns
      containers:
        - name: external-dns
          image: "docker.io/bitnami/external-dns:0.13.1-debian-11-r0"
          imagePullPolicy: "IfNotPresent"
          args:
            # Generic arguments
            - --metrics-address=:7979
            - --log-level=info
            - --log-format=text
            - --policy=upsert-only
            - --provider=linode
            - --registry=txt
            - --interval=1m
            - --source=service
            - --source=ingress
          env:
            # Linode environment variables
            - name: LINODE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: external-dns-linode-secret
                  key: API_TOKEN
          envFrom:
          ports:
            - name: http
              containerPort: 7979
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
      volumes:
